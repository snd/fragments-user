// Generated by CoffeeScript 1.9.3
module.exports.testApiUsersGetForbidden = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit'
      });
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response, token;
      response = arg[0];
      test.equal(response.statusCode, 200);
      token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(),
        headers: {
          authorization: "Bearer " + token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 403);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUsersGetOkAll = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertFakeUsers, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers'
      });
    }).then(function() {
      return insertFakeUsers(10);
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response, token;
      response = arg[0];
      test.equal(response.statusCode, 200);
      token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(),
        headers: {
          authorization: "Bearer " + token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      test.equal(response.body.length, 11);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUsersGetUnprocessable = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers'
      });
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var querystring, response, token;
      response = arg[0];
      test.equal(response.statusCode, 200);
      token = response.body.token;
      querystring = ['limit=a', 'offset=a', 'order=cash', 'asc=bla', 'where[id][gt]=ab'].join('&');
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers() + '?' + querystring,
        headers: {
          authorization: "Bearer " + token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 422);
      test.deepEqual(response.body, {
        query: {
          limit: 'a',
          offset: 'a',
          order: 'cash',
          asc: 'bla',
          where: {
            id: {
              gt: 'ab'
            }
          }
        },
        errors: {
          limit: 'must be an integer',
          offset: 'must be an integer',
          order: 'ordering by this column is not allowed',
          asc: 'must be either the string `true` or the string `false`',
          where: {
            id: {
              gt: 'must be parsable as an integer'
            }
          }
        }
      });
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUsersGetOkFiltered = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers'
      });
    }).then(function() {
      return insertUser({
        email: 'a@yahoo.com',
        name: 'a',
        password: 'topsecret',
        rights: ''
      });
    }).then(function() {
      return insertUser({
        email: 'b@gmail.com',
        name: 'b',
        password: 'topsecret',
        rights: ''
      });
    }).then(function() {
      return insertUser({
        email: 'c@yahoo.de',
        name: 'c',
        password: 'topsecret',
        rights: ''
      });
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var querystring, response, token;
      response = arg[0];
      test.equal(response.statusCode, 200);
      token = response.body.token;
      querystring = ['where[email][contains]=yahoo', 'order=name', 'asc=false'].join('&');
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers() + '?' + querystring,
        headers: {
          authorization: "Bearer " + token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      test.equal(response.body.length, 2);
      test.equal(response.body[0].name, 'c');
      test.equal(response.body[1].name, 'a');
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};
