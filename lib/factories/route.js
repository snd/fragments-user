// Generated by CoffeeScript 1.9.3
module.exports.route_cockpitApiLogin = function(POST, urlCockpitApiLogin, newJwt, loginValidator, firstUserWhereLogin, _) {
  return POST(urlCockpitApiLogin(), function(body, endUnprocessableJSON, endUnprocessableText, endJSON) {
    var errors;
    errors = loginValidator(body);
    if (errors != null) {
      endUnprocessableJSON(errors);
      return;
    }
    return firstUserWhereLogin(body).then(function(user) {
      var token;
      if (user == null) {
        endUnprocessableText('invalid username or password');
        return;
      }
      token = newJwt({
        id: user.id
      });
      return endJSON({
        token: token,
        user: _.omit(user, 'password')
      });
    });
  });
};

module.exports.route_cockpitApiMe = function(sequenz, GET, PATCH, urlCockpitApiMe) {
  return sequenz([
    GET(urlCockpitApiMe(), function(currentUser, endJSON, endForbidden) {
      if (currentUser == null) {
        return endForbidden();
      }
      return endJSON(currentUser);
    }), PATCH(urlCockpitApiMe(), function(currentUser, body, omitPassword, selfUpdateValidator, endUnprocessableJSON, endJSON, canAccessCockpit, updateUserWhereId) {
      if (!canAccessCockpit()) {
        return endForbidden();
      }
      return selfUpdateValidator(body, currentUser.id).then(function(errors) {
        if (errors != null) {
          return endUnprocessableJSON(errors);
        }
        delete body.rights;
        return updateUserWhereId(body, currentUser.id).then(function(updated) {
          return endJSON(omitPassword(updated));
        });
      });
    })
  ]);
};

module.exports.route_cockpitApiUsers = function(sequenz, urlCockpitApiUsers, GET, POST, PUT, PATCH, DELETE) {
  return sequenz([
    GET(urlCockpitApiUsers(), function(userTable, query, siv, endJSON, endForbidden, endUnprocessableJSON, canReadUsers, omitPassword, _) {
      var sql;
      if (!canReadUsers()) {
        return endForbidden();
      }
      sql = userTable;
      sql = siv.limit(sql, query);
      sql = siv.offset(sql, query);
      sql = siv.order(sql, query, {
        order: 'created_at',
        asc: false,
        allow: ['created_at', 'id', 'name', 'email']
      });
      sql = siv.integer(sql, query, 'id');
      sql = siv.string(sql, query, 'email');
      sql = siv.string(sql, query, 'name');
      sql = siv.date(sql, query, 'created_at');
      if (siv.isError(sql)) {
        return endUnprocessableJSON({
          query: query,
          errors: sql.json
        });
      } else {
        return sql.find().then(function(users) {
          return endJSON(omitPassword(users));
        });
      }
    }), GET(urlCockpitApiUsers(':id'), function(firstUserWhereId, endForbidden, params, endJSON, end404, canReadUsers, omitPassword) {
      if (!(canReadUsers() || canReadUsers(params.id))) {
        return endForbidden();
      }
      return firstUserWhereId(params.id).then(function(user) {
        if (user == null) {
          return end404();
        }
        return endJSON(omitPassword(user));
      });
    }), POST(urlCockpitApiUsers(), function(canCreateUsers, endForbidden, setHeaderLocation, endCreatedJSON, userInsertValidator, endUnprocessableJSON, body, omitPassword) {
      if (!canCreateUsers()) {
        return endForbidden();
      }
      return userInsertValidator(body).then(function(errors) {
        if (errors != null) {
          return endUnprocessableJSON(errors);
        }
        return insertUser(body).then(function(inserted) {
          setHeaderLocation(urlCockpitApiUsers(inserted.id));
          return endCreatedJSON(omitPassword(inserted));
        });
      });
    }), PATCH(urlCockpitApiUsers(':id'), function(canUpdateUsers, endForbidden, userUpdateValidator, endUnprocessableJSON, updateUserWhereId, omitPassword) {
      if (!(canUpdateUsers() || canUpdateUsers(params.id))) {
        return endForbidden();
      }
      return userUpdateValidator(body, params.id).then(function(errors) {
        if (errors != null) {
          return endUnprocessableJSON(errors);
        }
        return updateUserWhereId(body, params.id).then(function(updated) {
          return endJSON(omitPassword(updated));
        });
      });
    }), DELETE(urlCockpitApiUsers(':id'), function(canDeleteUsers, endForbidden, deleteUserWhereId, params, end) {
      if (!(canDeleteUsers() || canDeleteUsers(params.id))) {
        return endForbidden();
      }
      return deleteUserWhereId(params.id).then(function() {
        return end();
      });
    })
  ]);
};
