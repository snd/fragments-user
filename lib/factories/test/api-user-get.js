// Generated by CoffeeScript 1.9.3
module.exports.testApiUserGetForbidden = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertFakeUsers, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().bind({}).then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit'
      });
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      this.token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(2),
        headers: {
          authorization: "Bearer " + this.token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 403);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUserGetOk = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertFakeUsers, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers'
      });
    }).then(function() {
      return insertFakeUsers(3);
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response, token;
      response = arg[0];
      test.equal(response.statusCode, 200);
      token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(2),
        headers: {
          authorization: "Bearer " + token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      test.equal(response.body.id, 2);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUserGetSingleRight = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertFakeUsers, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().bind({}).then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers(2)'
      });
    }).then(function() {
      return insertFakeUsers(3);
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      this.token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(2),
        headers: {
          authorization: "Bearer " + this.token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      test.equal(response.body.id, 2);
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(3),
        headers: {
          authorization: "Bearer " + this.token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 403);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};

module.exports.testApiUserGetNotFound = function(command_serve, pgDropCreateMigrate, shutdown, envStringBaseUrl, urlApiLogin, urlApiUsers, requestPromise, insertFakeUsers, insertUser) {
  return function(test) {
    return pgDropCreateMigrate().bind({}).then(function() {
      return insertUser({
        email: 'test@example.com',
        name: 'exampleuser',
        password: 'topsecret',
        rights: 'canAccessCockpit\ncanReadUsers'
      });
    }).then(function() {
      return command_serve('cockpit');
    }).then(function() {
      return requestPromise({
        method: 'POST',
        url: envStringBaseUrl + urlApiLogin(),
        json: true,
        body: {
          username: 'exampleuser',
          password: 'topsecret'
        }
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 200);
      this.token = response.body.token;
      return requestPromise({
        method: 'GET',
        url: envStringBaseUrl + urlApiUsers(2),
        headers: {
          authorization: "Bearer " + this.token
        },
        json: true
      });
    }).then(function(arg) {
      var response;
      response = arg[0];
      test.equal(response.statusCode, 404);
      return shutdown();
    }).then(function() {
      return test.done();
    });
  };
};
